#! /usr/bin/env ruby

require 'vizkit'
require 'optparse'
require 'transformer/runtime'

hostname = nil
urdf_file = nil
camera_segment = nil
calib_prop = nil
state_task_name = nil
state_port_name = nil
camera_task_name = nil
image_port_name = nil
perform_undistortion = false
use_transformer = false
robot_visualization_frame = nil
camera_visualization_frame = nil
robot_root = nil
disable_transformer = false
draw_segments = []

def err(msg, options)
   puts "Usage: "
   puts options
   raise(msg)
end

options = OptionParser.new do |opt|
    opt.banner = <<-EOD
camera_overlay [options] <camera_task> <image_port> <calibration_property>

calibration_property is the name of the property, where the camera calibration can be found on camera_task
robot_visualization_frame is the name of the frame 
    EOD
    opt.on '--host=HOSTNAME', String, 'the host we should contact to find RTT tasks' do |host|
        hostname = host
    end
    opt.on '--urdf=PATH_TO_URDF_FILE', String, 'displays the robot urdf file in the same window' do |urdf|
        urdf_file = urdf
    end
    opt.on '--joint_state_port=TASK_CONTEXT_NAME:PORT_NAME', '-s=TASK_CONTEXT_NAME:PORT_NAME' , 'Force joint state port to be PORT_NAME of task TASK_CONTEXT_NAME. Requried if URDF is used.' do |val|
        splitted = val.split(':')
        if splitted.size != 2
            raise("Definition of joint state port must follow the pattern 'TASK_CONTEXT_NAME:PORT_NAME'. Example: --joint_state_port=my_task:the_port")
        end
        state_task_name = splitted[0]
        state_port_name = splitted[1]
    end
    opt.on '--perform_undistortion' do
      perform_undistortion = true
    end
    opt.on '--use_transformer', "Don't calculate camera pose, but retrieve it from Transformer. If this is set, --camera_transformer_frame and --robot_transformer_frame must be set." do
      use_transformer = true
    end
    opt.on '--disable_transformer', "Disables the transformer completely. No transformations published in transformer will be displayed! Obviously does not work well together with --use_tansformer." do
      disable_transformer = true
    end
    opt.on '--robot_transformer_frame=NAME', String, 'Frame (from transformer) that should be used as visualization frame for the robot. Requried if URDF and if transformer is used.' do |val|
      robot_visualization_frame = val
    end
    opt.on '--camera_transformer_frame=NAME', String, 'Frame(from transformer) that should be used as visualization frame for the camera. Requried if URDF and transformer is used.' do |val|
      camera_visualization_frame = val
    end
    opt.on '--camera_segment=NAME', String, 'Segement in URDF, that represetns the camera location. Requried if URDF is used, and transformer is NOT used.' do |val|
      camera_segment=val
    end
    opt.on '--draw_segment=NAME', String, 'Draw an additional segment of the robot' do |val|
       draw_segments.push val
    end
end

args = options.parse(ARGV)

camera_task_name = args.shift
image_port_name = args.shift
calib_prop = args.shift

if not camera_task_name
   err("No camera task name given", options)
end

if not image_port_name
   err("No image port name given", options)
end

if not calib_prop
   err("No camera calibration given", options)
end


################################################################################################

if hostname
    Orocos::CORBA.max_message_size = 8400000
    Orocos::CORBA.name_service.ip = hostname
end
Orocos.initialize
Orocos.load_typekit("base")

if disable_transformer
    Vizkit.vizkit3d_transformer_broadcaster_name = ["This is a stupid hack", "to trick vizkit to not update transformations via tranformer. I have not found any property to disable it... so..."]
end

view3d = Vizkit.vizkit3d_widget
view3d.setAxes(false)
view3d.setCameraManipulator("Trackball")
view3d.grid.enabled = false
view3d.show
overlay = Vizkit.default_loader.CameraOverlay3D
if disable_transformer
    view3d.setTransformer(false)
end
if use_transformer
    raise "camera_visualization_frame not specified" if not camera_visualization_frame
    overlay.frame = camera_visualization_frame
else
    raise "camera_segment not specified" if not camera_segment
    overlay.frame = camera_segment
end

camera_task = Orocos::TaskContext.get camera_task_name
camera_calib = camera_task.property(calib_prop).read
overlay.setCameraIntrinsics(camera_calib, perform_undistortion)

if urdf_file
   roboviz = Vizkit.default_loader.RobotVisualization
   roboviz.modelFile = urdf_file
   roboviz.jointsSize = 0.02
   if(use_transformer)
        raise "robot_visualization_frame not specified" if not robot_visualization_frame
        roboviz.frame = robot_visualization_frame

   else
        robot_root = roboviz.getRootLink
        roboviz.frame = robot_root
   end

   if not state_task_name
      puts "URDF file, but no joint state task has been given. Robot visualization will not be updated with joint data"
   else
      joint_state_task = Orocos::Async.proxy state_task_name
      joint_state_task.port(state_port_name).on_data do |data|
          roboviz.updateData(data)
          if not use_transformer
              segs = [camera_segment]+draw_segments
              segs.each do |seg|
                t = roboviz.getTranslation(seg, robot_root)
                r = roboviz.getRotation(seg, robot_root)
                view3d.setTransformation(seg, robot_root, t, r)
              end
          end
      end
   end
end

camera_task_proxy = Orocos::Async.proxy camera_task_name
camera_task_proxy.port(image_port_name).on_data do |data|
   overlay.updateData(data)
end

Vizkit.exec

